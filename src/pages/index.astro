---
import Layout from '../layouts/Layout.astro';
import PrefixResult from '../components/PrefixResult.astro';
import SingleIPResult from '../components/SingleIPResult.astro';

interface DNSBLResult {
  ip: string;
  hostname: string;
  timestamp: string;
  results: {
    dnsbl: string;
    isListed: boolean;
    info?: string;
    unblockInfo?: {
      provider: string;
      method: string;
      url: string;
    };
  }[];
  summary: {
    total: number;
    listed: number;
    clean: number;
  };
}

interface PrefixCheckResult {
  prefix: string;
  timestamp: string;
  scanDuration: string;
  totalChecked: number;
  listedIPs: DNSBLResult[];
  summary: {
    totalIPs: number;
    listedCount: number;
    cleanCount: number;
    percentageListed: string;
  };
  performance: {
    averageTimePerIP: string;
    ipsPerSecond: string;
  };
}

let dnsblResult: DNSBLResult | null = null;
let prefixResult: PrefixCheckResult | null = null;
let error: string | null = null;
let activeTab = 'single';

if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData();
  const ip = data.get('ip');
  const prefix = data.get('prefix');
  const checkType = data.get('checkType');

  try {
    if (checkType === 'single') {
      const response = await fetch(`${import.meta.env.API_URL}/api/check?ip=${ip}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json'
        },
        mode: 'cors',
        credentials: 'include'
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error:', response.status, errorText);
        throw new Error(`Failed to fetch DNSBL data: ${response.status}`);
      }

      dnsblResult = await response.json();
      activeTab = 'single';
    } else if (checkType === 'prefix') {
      const response = await fetch(`${import.meta.env.API_URL}/api/check-prefix?ip=${ip}&prefix=${prefix}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json'
        },
        mode: 'cors',
        credentials: 'include'
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error:', response.status, errorText);
        throw new Error(`Failed to fetch prefix check data: ${response.status}`);
      }

      prefixResult = await response.json();
      activeTab = 'prefix';
    }
  } catch (e) {
    console.error('Fetch error:', e);
    error = e instanceof Error ? e.message : 'An error occurred';
  }
}
---

<Layout>
  <div id="loadingOverlay" class="fixed inset-0 z-50 hidden">
    <div class="w-full h-full flex justify-center items-center">
      <div class="card bg-base-100 shadow-xl p-8 flex flex-col items-center">
        <span class="loading loading-spinner loading-lg text-primary"></span>
        <p class="mt-4 text-lg font-medium">Processing request...</p>
        <p class="text-sm text-gray-500">This may take a few moments</p>
      </div>
    </div>
  </div>

  <div class="flex justify-center items-center min-h-screen p-4">
    <div class="card w-full max-w-2xl bg-base-100 shadow-xl">
      <div class="card-body p-4 md:p-6">
        <h2 class="card-title text-xl md:text-2xl mb-4 text-center md:text-left">DNSBL Checker - Laros</h2>

        <div class="tabs tabs-bordered mb-6 flex flex-wrap justify-center md:justify-start">
          <a class={`tab tab-sm md:tab-md ${activeTab === 'single' ? 'tab-active' : ''}`} data-tab="single">Single IP Check</a>
          <a class={`tab tab-sm md:tab-md ${activeTab === 'prefix' ? 'tab-active' : ''}`} data-tab="prefix">Prefix Check</a>
        </div>

        <div id="singleCheck" class={activeTab === 'single' ? '' : 'hidden'}>
          <form method="post" class="mb-6" id="singleForm">
            <input type="hidden" name="checkType" value="single" />
            <div class="flex flex-col md:flex-row gap-2">
              <input
                type="text"
                name="ip"
                placeholder="Enter IP address (e.g., 192.168.1.1)"
                class="input input-bordered w-full md:flex-1 text-sm md:text-base"
                required
                pattern="^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
                minlength="7"
                maxlength="15"
              />
              <button type="submit" class="btn btn-primary w-full md:w-auto">Check</button>
            </div>
          </form>

          {dnsblResult && <SingleIPResult result={dnsblResult} />}
        </div>

        <div id="prefixCheck" class={activeTab === 'prefix' ? '' : 'hidden'}>
          <form method="post" class="mb-6" id="prefixForm">
            <input type="hidden" name="checkType" value="prefix" />
            <div class="flex flex-col md:flex-row gap-2">
              <input
                type="text"
                name="ip"
                placeholder="Enter IP address (e.g., 192.168.1.1)"
                class="input input-bordered w-full md:flex-1 text-sm md:text-base"
                required
                pattern="^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
                minlength="7"
                maxlength="15"
              />
              <input
                type="text"
                inputmode="numeric"
                name="prefix"
                placeholder="00"
                class="input input-bordered w-full md:w-20 text-sm md:text-base"
                required
                minlength="1"
                maxlength="2"
              />
              <button type="submit" class="btn btn-primary w-full md:w-auto">Check Prefix</button>
            </div>
          </form>

          {prefixResult && <PrefixResult result={prefixResult} />}
        </div>

        {error && (
          <div class="alert alert-error mb-4 text-sm md:text-base">
            <span>{error}</span>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Tab switching logic
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', (e) => {
      const tabId = (e.target as HTMLElement).getAttribute('data-tab');
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('tab-active'));
      (e.target as HTMLElement).classList.add('tab-active');

      document.getElementById('singleCheck')?.classList.add('hidden');
      document.getElementById('prefixCheck')?.classList.add('hidden');

      document.getElementById(`${tabId}Check`)?.classList.remove('hidden');
    });
  });

  const loadingOverlay = document.getElementById('loadingOverlay');
  const forms = document.querySelectorAll('form');

  forms.forEach(form => {
    form.addEventListener('submit', (e) => {
      loadingOverlay?.classList.remove('hidden');
    });
  });

  window.addEventListener('load', () => {
    loadingOverlay?.classList.add('hidden');
  });
</script>

<style>
  @media (max-width: 768px) {
    .card-body {
      padding: 1rem;
    }

    .input, .btn {
      font-size: 0.875rem;
    }

    .tabs {
      font-size: 0.875rem;
    }
  }
</style>
